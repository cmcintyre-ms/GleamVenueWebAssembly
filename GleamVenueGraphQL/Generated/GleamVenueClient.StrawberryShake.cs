// <auto-generated/>
#nullable enable

namespace GleamVenueWebAssembly.GleamVenueGraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityResult : global::System.IEquatable<FetchVenueByCityResult>, IFetchVenueByCityResult
    {
        public FetchVenueByCityResult(global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity?>? filterByCity)
        {
            FilterByCity = filterByCity;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity?>? FilterByCity { get; }

        public virtual global::System.Boolean Equals(FetchVenueByCityResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(FilterByCity, other.FilterByCity));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchVenueByCityResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FilterByCity != null)
                {
                    foreach (var FilterByCity_elm in FilterByCity)
                    {
                        if (FilterByCity_elm != null)
                        {
                            hash ^= 397 * FilterByCity_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCity_FilterByCity_GleamVenue : global::System.IEquatable<FetchVenueByCity_FilterByCity_GleamVenue>, IFetchVenueByCity_FilterByCity_GleamVenue
    {
        public FetchVenueByCity_FilterByCity_GleamVenue(global::System.Guid id, global::System.String name, global::System.String description, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity_Address address)
        {
            Id = id;
            Name = name;
            Description = description;
            Address = address;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
        public global::System.String Description { get; }
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity_Address Address { get; }

        public virtual global::System.Boolean Equals(FetchVenueByCity_FilterByCity_GleamVenue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Description.Equals(other.Description) && Address.Equals(other.Address);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchVenueByCity_FilterByCity_GleamVenue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Address.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCity_FilterByCity_Address_Address : global::System.IEquatable<FetchVenueByCity_FilterByCity_Address_Address>, IFetchVenueByCity_FilterByCity_Address_Address
    {
        public FetchVenueByCity_FilterByCity_Address_Address(global::System.String city)
        {
            City = city;
        }

        public global::System.String City { get; }

        public virtual global::System.Boolean Equals(FetchVenueByCity_FilterByCity_Address_Address? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (City.Equals(other.City));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchVenueByCity_FilterByCity_Address_Address)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * City.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCityResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity?>? FilterByCity { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCity_FilterByCity
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
        public global::System.String Description { get; }
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity_Address Address { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCity_FilterByCity_GleamVenue : IFetchVenueByCity_FilterByCity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCity_FilterByCity_Address
    {
        public global::System.String City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCity_FilterByCity_Address_Address : IFetchVenueByCity_FilterByCity_Address
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewResult : global::System.IEquatable<AddNewReviewResult>, IAddNewReviewResult
    {
        public AddNewReviewResult(global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview? createNewReview)
        {
            CreateNewReview = createNewReview;
        }

        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview? CreateNewReview { get; }

        public virtual global::System.Boolean Equals(AddNewReviewResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateNewReview is null && other.CreateNewReview is null) || CreateNewReview != null && CreateNewReview.Equals(other.CreateNewReview)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddNewReviewResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateNewReview != null)
                {
                    hash ^= 397 * CreateNewReview.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReview_CreateNewReview_AddReviewPayload : global::System.IEquatable<AddNewReview_CreateNewReview_AddReviewPayload>, IAddNewReview_CreateNewReview_AddReviewPayload
    {
        public AddNewReview_CreateNewReview_AddReviewPayload(global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview_Review? review)
        {
            Review = review;
        }

        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview_Review? Review { get; }

        public virtual global::System.Boolean Equals(AddNewReview_CreateNewReview_AddReviewPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Review is null && other.Review is null) || Review != null && Review.Equals(other.Review)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddNewReview_CreateNewReview_AddReviewPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Review != null)
                {
                    hash ^= 397 * Review.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReview_CreateNewReview_Review_Review : global::System.IEquatable<AddNewReview_CreateNewReview_Review_Review>, IAddNewReview_CreateNewReview_Review_Review
    {
        public AddNewReview_CreateNewReview_Review_Review(global::System.Guid id, global::System.String description, global::System.String reviewersEmail, global::System.Guid gleamVenueId)
        {
            Id = id;
            Description = description;
            ReviewersEmail = reviewersEmail;
            GleamVenueId = gleamVenueId;
        }

        public global::System.Guid Id { get; }
        public global::System.String Description { get; }
        public global::System.String ReviewersEmail { get; }
        public global::System.Guid GleamVenueId { get; }

        public virtual global::System.Boolean Equals(AddNewReview_CreateNewReview_Review_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Description.Equals(other.Description) && ReviewersEmail.Equals(other.ReviewersEmail) && GleamVenueId.Equals(other.GleamVenueId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddNewReview_CreateNewReview_Review_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * ReviewersEmail.GetHashCode();
                hash ^= 397 * GleamVenueId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReviewResult
    {
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview? CreateNewReview { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReview_CreateNewReview
    {
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview_Review? Review { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReview_CreateNewReview_AddReviewPayload : IAddNewReview_CreateNewReview
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReview_CreateNewReview_Review
    {
        public global::System.Guid Id { get; }
        public global::System.String Description { get; }
        public global::System.String ReviewersEmail { get; }
        public global::System.Guid GleamVenueId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReview_CreateNewReview_Review_Review : IAddNewReview_CreateNewReview_Review
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesResult : global::System.IEquatable<FetchAllVenuesResult>, IFetchAllVenuesResult
    {
        public FetchAllVenuesResult(global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues?>? allGleamVenues)
        {
            AllGleamVenues = allGleamVenues;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues?>? AllGleamVenues { get; }

        public virtual global::System.Boolean Equals(FetchAllVenuesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllGleamVenues, other.AllGleamVenues));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchAllVenuesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGleamVenues != null)
                {
                    foreach (var AllGleamVenues_elm in AllGleamVenues)
                    {
                        if (AllGleamVenues_elm != null)
                        {
                            hash ^= 397 * AllGleamVenues_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenues_AllGleamVenues_GleamVenue : global::System.IEquatable<FetchAllVenues_AllGleamVenues_GleamVenue>, IFetchAllVenues_AllGleamVenues_GleamVenue
    {
        public FetchAllVenues_AllGleamVenues_GleamVenue(global::System.Guid id, global::System.String name, global::System.String description, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues_Address address)
        {
            Id = id;
            Name = name;
            Description = description;
            Address = address;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
        public global::System.String Description { get; }
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues_Address Address { get; }

        public virtual global::System.Boolean Equals(FetchAllVenues_AllGleamVenues_GleamVenue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Description.Equals(other.Description) && Address.Equals(other.Address);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchAllVenues_AllGleamVenues_GleamVenue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Address.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenues_AllGleamVenues_Address_Address : global::System.IEquatable<FetchAllVenues_AllGleamVenues_Address_Address>, IFetchAllVenues_AllGleamVenues_Address_Address
    {
        public FetchAllVenues_AllGleamVenues_Address_Address(global::System.String city)
        {
            City = city;
        }

        public global::System.String City { get; }

        public virtual global::System.Boolean Equals(FetchAllVenues_AllGleamVenues_Address_Address? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (City.Equals(other.City));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchAllVenues_AllGleamVenues_Address_Address)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * City.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenuesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues?>? AllGleamVenues { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenues_AllGleamVenues
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
        public global::System.String Description { get; }
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues_Address Address { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenues_AllGleamVenues_GleamVenue : IFetchAllVenues_AllGleamVenues
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenues_AllGleamVenues_Address
    {
        public global::System.String City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenues_AllGleamVenues_Address_Address : IFetchAllVenues_AllGleamVenues_Address
    {
    }

    /// <summary>
    /// Represents the operation service of the FetchVenueByCity GraphQL operation
    /// <code>
    /// query FetchVenueByCity($cityQuery: String) {
    ///   filterByCity(city: $cityQuery) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchVenueByCityQueryDocument()
        {
        }

        public static FetchVenueByCityQueryDocument Instance { get; } = new FetchVenueByCityQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x42,
            0x79,
            0x43,
            0x69,
            0x74,
            0x79,
            0x28,
            0x24,
            0x63,
            0x69,
            0x74,
            0x79,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x42,
            0x79,
            0x43,
            0x69,
            0x74,
            0x79,
            0x28,
            0x63,
            0x69,
            0x74,
            0x79,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x69,
            0x74,
            0x79,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x47,
            0x6c,
            0x65,
            0x61,
            0x6d,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "77fd9425fdd07aeb82fe18d35baccd86");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchVenueByCity GraphQL operation
    /// <code>
    /// query FetchVenueByCity($cityQuery: String) {
    ///   filterByCity(city: $cityQuery) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityQuery : global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchVenueByCityResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public FetchVenueByCityQuery(global::StrawberryShake.IOperationExecutor<IFetchVenueByCityResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchVenueByCityResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchVenueByCityResult>> ExecuteAsync(global::System.String? cityQuery, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(cityQuery);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchVenueByCityResult>> Watch(global::System.String? cityQuery, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(cityQuery);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? cityQuery)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("cityQuery", FormatCityQuery(cityQuery));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchVenueByCityQueryDocument.Instance.Hash.Value, name: "FetchVenueByCity", document: FetchVenueByCityQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCityQuery(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchVenueByCity GraphQL operation
    /// <code>
    /// query FetchVenueByCity($cityQuery: String) {
    ///   filterByCity(city: $cityQuery) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchVenueByCityQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchVenueByCityResult>> ExecuteAsync(global::System.String? cityQuery, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchVenueByCityResult>> Watch(global::System.String? cityQuery, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddNewReview GraphQL operation
    /// <code>
    /// mutation AddNewReview($description: String, $reviewerEmail: String, $venueID: UUID!) {
    ///   createNewReview(description: $description, reviewerEmail: $reviewerEmail, venueID: $venueID) {
    ///     __typename
    ///     review {
    ///       __typename
    ///       id
    ///       description
    ///       reviewersEmail
    ///       gleamVenueId
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewMutationDocument : global::StrawberryShake.IDocument
    {
        private AddNewReviewMutationDocument()
        {
        }

        public static AddNewReviewMutationDocument Instance { get; } = new AddNewReviewMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x64,
            0x64,
            0x4e,
            0x65,
            0x77,
            0x52,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x28,
            0x24,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x2c,
            0x20,
            0x24,
            0x76,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x65,
            0x4e,
            0x65,
            0x77,
            0x52,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x28,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x3a,
            0x20,
            0x24,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x2c,
            0x20,
            0x72,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x65,
            0x72,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x2c,
            0x20,
            0x76,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x24,
            0x76,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x49,
            0x44,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x72,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x65,
            0x72,
            0x73,
            0x45,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x67,
            0x6c,
            0x65,
            0x61,
            0x6d,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x49,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x76,
            0x69,
            0x65,
            0x77,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fb8188fb55df24a8d2df0103db21c0cb");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddNewReview GraphQL operation
    /// <code>
    /// mutation AddNewReview($description: String, $reviewerEmail: String, $venueID: UUID!) {
    ///   createNewReview(description: $description, reviewerEmail: $reviewerEmail, venueID: $venueID) {
    ///     __typename
    ///     review {
    ///       __typename
    ///       id
    ///       description
    ///       reviewersEmail
    ///       gleamVenueId
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewMutation : global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddNewReviewResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public AddNewReviewMutation(global::StrawberryShake.IOperationExecutor<IAddNewReviewResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddNewReviewResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddNewReviewResult>> ExecuteAsync(global::System.String? description, global::System.String? reviewerEmail, global::System.Guid venueID, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(description, reviewerEmail, venueID);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddNewReviewResult>> Watch(global::System.String? description, global::System.String? reviewerEmail, global::System.Guid venueID, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(description, reviewerEmail, venueID);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? description, global::System.String? reviewerEmail, global::System.Guid venueID)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("description", FormatDescription(description));
            variables.Add("reviewerEmail", FormatReviewerEmail(reviewerEmail));
            variables.Add("venueID", FormatVenueID(venueID));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddNewReviewMutationDocument.Instance.Hash.Value, name: "AddNewReview", document: AddNewReviewMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDescription(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatReviewerEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatVenueID(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddNewReview GraphQL operation
    /// <code>
    /// mutation AddNewReview($description: String, $reviewerEmail: String, $venueID: UUID!) {
    ///   createNewReview(description: $description, reviewerEmail: $reviewerEmail, venueID: $venueID) {
    ///     __typename
    ///     review {
    ///       __typename
    ///       id
    ///       description
    ///       reviewersEmail
    ///       gleamVenueId
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IAddNewReviewMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddNewReviewResult>> ExecuteAsync(global::System.String? description, global::System.String? reviewerEmail, global::System.Guid venueID, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddNewReviewResult>> Watch(global::System.String? description, global::System.String? reviewerEmail, global::System.Guid venueID, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchAllVenues GraphQL operation
    /// <code>
    /// query FetchAllVenues {
    ///   allGleamVenues {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchAllVenuesQueryDocument()
        {
        }

        public static FetchAllVenuesQueryDocument Instance { get; } = new FetchAllVenuesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x41,
            0x6c,
            0x6c,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x6c,
            0x6c,
            0x47,
            0x6c,
            0x65,
            0x61,
            0x6d,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x65,
            0x73,
            0x63,
            0x72,
            0x69,
            0x70,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x69,
            0x74,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x47,
            0x6c,
            0x65,
            0x61,
            0x6d,
            0x56,
            0x65,
            0x6e,
            0x75,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b006d26c6a2ce5734f85411729edb282");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchAllVenues GraphQL operation
    /// <code>
    /// query FetchAllVenues {
    ///   allGleamVenues {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesQuery : global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchAllVenuesResult> _operationExecutor;
        public FetchAllVenuesQuery(global::StrawberryShake.IOperationExecutor<IFetchAllVenuesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchAllVenuesResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchAllVenuesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchAllVenuesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchAllVenuesQueryDocument.Instance.Hash.Value, name: "FetchAllVenues", document: FetchAllVenuesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchAllVenues GraphQL operation
    /// <code>
    /// query FetchAllVenues {
    ///   allGleamVenues {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     address {
    ///       __typename
    ///       city
    ///     }
    ///     ... on GleamVenue {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IFetchAllVenuesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchAllVenuesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchAllVenuesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GleamVenueClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class GleamVenueClient : global::GleamVenueWebAssembly.GleamVenueGraphQL.IGleamVenueClient
    {
        private readonly global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery _fetchVenueByCity;
        private readonly global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation _addNewReview;
        private readonly global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery _fetchAllVenues;
        public GleamVenueClient(global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery fetchVenueByCity, global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation addNewReview, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery fetchAllVenues)
        {
            _fetchVenueByCity = fetchVenueByCity ?? throw new global::System.ArgumentNullException(nameof(fetchVenueByCity));
            _addNewReview = addNewReview ?? throw new global::System.ArgumentNullException(nameof(addNewReview));
            _fetchAllVenues = fetchAllVenues ?? throw new global::System.ArgumentNullException(nameof(fetchAllVenues));
        }

        public static global::System.String ClientName => "GleamVenueClient";
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery FetchVenueByCity => _fetchVenueByCity;
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation AddNewReview => _addNewReview;
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery FetchAllVenues => _fetchAllVenues;
    }

    /// <summary>
    /// Represents the GleamVenueClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial interface IGleamVenueClient
    {
        global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery FetchVenueByCity { get; }

        global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation AddNewReview { get; }

        global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery FetchAllVenues { get; }
    }
}

namespace GleamVenueWebAssembly.GleamVenueGraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class GleamVenueEntity
    {
        public GleamVenueEntity(global::System.Guid id = default !, global::System.String name = default !, global::System.String description = default !, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData address = default !)
        {
            Id = id;
            Name = name;
            Description = description;
            Address = address;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
        public global::System.String Description { get; }
        public global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData Address { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class ReviewEntity
    {
        public ReviewEntity(global::System.Guid id = default !, global::System.String description = default !, global::System.String reviewersEmail = default !, global::System.Guid gleamVenueId = default !)
        {
            Id = id;
            Description = description;
            ReviewersEmail = reviewersEmail;
            GleamVenueId = gleamVenueId;
        }

        public global::System.Guid Id { get; }
        public global::System.String Description { get; }
        public global::System.String ReviewersEmail { get; }
        public global::System.Guid GleamVenueId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchVenueByCityResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchVenueByCity_FilterByCity_GleamVenue> _fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper;
        public FetchVenueByCityResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchVenueByCity_FilterByCity_GleamVenue> fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper = fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult);

        public FetchVenueByCityResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchVenueByCityResultInfo info)
            {
                return new FetchVenueByCityResult(MapIFetchVenueByCity_FilterByCityArray(info.FilterByCity, snapshot));
            }

            throw new global::System.ArgumentException("FetchVenueByCityResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity?>? MapIFetchVenueByCity_FilterByCityArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gleamVenues = new global::System.Collections.Generic.List<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gleamVenues.Add(MapIFetchVenueByCity_FilterByCity(child, snapshot));
            }

            return gleamVenues;
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity? MapIFetchVenueByCity_FilterByCity(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("GleamVenue", global::System.StringComparison.Ordinal))
            {
                return _fetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper.Map(snapshot.GetEntity<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchVenueByCityResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? filterByCity, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FilterByCity = filterByCity;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? FilterByCity { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchVenueByCityResultInfo(FilterByCity, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper : global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchVenueByCity_FilterByCity_GleamVenue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchVenueByCity_FilterByCity_GleamVenue Map(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchVenueByCity_FilterByCity_GleamVenue(entity.Id, entity.Name, entity.Description, MapNonNullableIFetchVenueByCity_FilterByCity_Address(entity.Address, snapshot));
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCity_FilterByCity_Address MapNonNullableIFetchVenueByCity_FilterByCity_Address(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchVenueByCity_FilterByCity_Address returnValue = default !;
            if (data.__typename.Equals("Address", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchVenueByCity_FilterByCity_Address_Address(data.City ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.AddNewReviewResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity, AddNewReview_CreateNewReview_Review_Review> _addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper;
        public AddNewReviewResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity, AddNewReview_CreateNewReview_Review_Review> addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper = addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult);

        public AddNewReviewResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddNewReviewResultInfo info)
            {
                return new AddNewReviewResult(MapIAddNewReview_CreateNewReview(info.CreateNewReview, snapshot));
            }

            throw new global::System.ArgumentException("AddNewReviewResultInfo expected.");
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview? MapIAddNewReview_CreateNewReview(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddNewReview_CreateNewReview returnValue = default !;
            if (data?.__typename.Equals("AddReviewPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddNewReview_CreateNewReview_AddReviewPayload(MapIAddNewReview_CreateNewReview_Review(data.Review, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReview_CreateNewReview_Review? MapIAddNewReview_CreateNewReview_Review(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _addNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddNewReviewResultInfo(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData? createNewReview, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateNewReview = createNewReview;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData? CreateNewReview { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddNewReviewResultInfo(CreateNewReview, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity, AddNewReview_CreateNewReview_Review_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddNewReview_CreateNewReview_Review_Review Map(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddNewReview_CreateNewReview_Review_Review(entity.Id, entity.Description, entity.ReviewersEmail, entity.GleamVenueId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchAllVenuesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchAllVenues_AllGleamVenues_GleamVenue> _fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper;
        public FetchAllVenuesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchAllVenues_AllGleamVenues_GleamVenue> fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper = fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult);

        public FetchAllVenuesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchAllVenuesResultInfo info)
            {
                return new FetchAllVenuesResult(MapIFetchAllVenues_AllGleamVenuesArray(info.AllGleamVenues, snapshot));
            }

            throw new global::System.ArgumentException("FetchAllVenuesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues?>? MapIFetchAllVenues_AllGleamVenuesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gleamVenues = new global::System.Collections.Generic.List<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                gleamVenues.Add(MapIFetchAllVenues_AllGleamVenues(child, snapshot));
            }

            return gleamVenues;
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues? MapIFetchAllVenues_AllGleamVenues(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("GleamVenue", global::System.StringComparison.Ordinal))
            {
                return _fetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper.Map(snapshot.GetEntity<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchAllVenuesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allGleamVenues, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGleamVenues = allGleamVenues;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? AllGleamVenues { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchAllVenuesResultInfo(AllGleamVenues, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper : global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, FetchAllVenues_AllGleamVenues_GleamVenue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchAllVenues_AllGleamVenues_GleamVenue Map(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchAllVenues_AllGleamVenues_GleamVenue(entity.Id, entity.Name, entity.Description, MapNonNullableIFetchAllVenues_AllGleamVenues_Address(entity.Address, snapshot));
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenues_AllGleamVenues_Address MapNonNullableIFetchAllVenues_AllGleamVenues_Address(global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchAllVenues_AllGleamVenues_Address returnValue = default !;
            if (data.__typename.Equals("Address", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchAllVenues_AllGleamVenues_Address_Address(data.City ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchVenueByCityBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public FetchVenueByCityBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchVenueByCityResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchVenueByCityResult Result, FetchVenueByCityResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchVenueByCityResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchVenueByCityResult, FetchVenueByCityResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? filterByCityId = default !;
            _entityStore.Update(session =>
            {
                filterByCityId = UpdateIFetchVenueByCity_FilterByCityEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filterByCity"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchVenueByCityResultInfo(filterByCityId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIFetchVenueByCity_FilterByCityEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gleamVenues = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gleamVenues.Add(UpdateIFetchVenueByCity_FilterByCityEntity(session, child, entityIds));
            }

            return gleamVenues;
        }

        private global::StrawberryShake.EntityId? UpdateIFetchVenueByCity_FilterByCityEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("GleamVenue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity? entity))
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableIFetchVenueByCity_FilterByCity_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableIFetchVenueByCity_FilterByCity_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData DeserializeNonNullableIFetchVenueByCity_FilterByCity_Address(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData(typename, city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddNewReviewBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        public AddNewReviewBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddNewReviewResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddNewReviewResult Result, AddNewReviewResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IAddNewReviewResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddNewReviewResult, AddNewReviewResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData? createNewReviewId = default !;
            _entityStore.Update(session =>
            {
                createNewReviewId = DeserializeIAddNewReview_CreateNewReview(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createNewReview"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddNewReviewResultInfo(createNewReviewId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData? DeserializeIAddNewReview_CreateNewReview(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddReviewPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddReviewPayloadData(typename, review: UpdateIAddNewReview_CreateNewReview_ReviewEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "review"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddNewReview_CreateNewReview_ReviewEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewersEmail")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gleamVenueId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewersEmail")), DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gleamVenueId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class FetchAllVenuesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchAllVenuesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchAllVenuesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchAllVenuesResult Result, FetchAllVenuesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchAllVenuesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchAllVenuesResult, FetchAllVenuesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allGleamVenuesId = default !;
            _entityStore.Update(session =>
            {
                allGleamVenuesId = UpdateIFetchAllVenues_AllGleamVenuesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGleamVenues"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchAllVenuesResultInfo(allGleamVenuesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIFetchAllVenues_AllGleamVenuesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gleamVenues = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gleamVenues.Add(UpdateIFetchAllVenues_AllGleamVenuesEntity(session, child, entityIds));
            }

            return gleamVenues;
        }

        private global::StrawberryShake.EntityId? UpdateIFetchAllVenues_AllGleamVenuesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("GleamVenue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity? entity))
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableIFetchAllVenues_AllGleamVenues_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableIFetchAllVenues_AllGleamVenues_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData DeserializeNonNullableIFetchAllVenues_AllGleamVenues_Address(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddressData(typename, city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddressData
    {
        public AddressData(global::System.String __typename, global::System.String? city = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            City = city;
        }

        public global::System.String __typename { get; }
        public global::System.String? City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class AddReviewPayloadData
    {
        public AddReviewPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? review = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Review = review;
        }

        public global::System.String __typename { get; }
        public global::StrawberryShake.EntityId? Review { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class GleamVenueClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "GleamVenue" => ParseGleamVenueEntityId(obj, __typename),
                "Review" => ParseReviewEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "GleamVenue" => FormatGleamVenueEntityId(entityId),
                "Review" => FormatReviewEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseGleamVenueEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatGleamVenueEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public partial class GleamVenueClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GleamVenueClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.0.0")]
    public static partial class GleamVenueClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueClientStoreAccessor> AddGleamVenueClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchVenueByCityQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.AddNewReviewMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchAllVenuesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.GleamVenueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.IGleamVenueClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueClientStoreAccessor>("GleamVenueClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GleamVenueClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchVenueByCity_FilterByCity_GleamVenue>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchVenueByCity_FilterByCity_GleamVenueFromGleamVenueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.ReviewEntity, global::GleamVenueWebAssembly.GleamVenueGraphQL.AddNewReview_CreateNewReview_Review_Review>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddNewReview_CreateNewReview_Review_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueEntity, global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchAllVenues_AllGleamVenues_GleamVenue>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchAllVenues_AllGleamVenues_GleamVenueFromGleamVenueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchVenueByCityResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchVenueByCityBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchVenueByCityQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchVenueByCityQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchVenueByCityQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddNewReviewResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.AddNewReviewBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.AddNewReviewMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.IAddNewReviewMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.AddNewReviewMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchAllVenuesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.FetchAllVenuesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchAllVenuesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.IFetchAllVenuesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.FetchAllVenuesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GleamVenueWebAssembly.GleamVenueGraphQL.State.GleamVenueClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.GleamVenueClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GleamVenueWebAssembly.GleamVenueGraphQL.IGleamVenueClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GleamVenueWebAssembly.GleamVenueGraphQL.GleamVenueClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
